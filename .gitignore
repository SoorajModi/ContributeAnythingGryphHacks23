### C ###
# Prerequisites
**/*.d

# Object files
**/*.o
**/*.ko
**/*.obj
**/*.elf

# Linker output
**/*.ilk
**/*.map
**/*.exp

# Precompiled Headers
**/*.gch
**/*.pch

# Libraries
**/*.lib
**/*.a
**/*.la
**/*.lo

# Shared objects (inc. Windows DLLs)
**/*.dll
**/*.so
**/*.so.*
**/*.dylib

# Executables
**/*.exe
**/*.out
**/*.app
**/*.i*86
**/*.x86_64
**/*.hex

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
**/*.mod*
**/*.cmd
**/.tmp_versions/
**/modules.order
**/Module.symvers
**/Mkfile.old
**/dkms.conf

### Java ###
# Compiled class file
**/*.class

# Log file
**/*.log

# Package Files #
**/*.jar
**/*.war
**/*.nar
**/*.ear
**/*.zip
**/*.tar.gz
**/*.rar

### Node ###
# Logs
**/logs
**/npm-debug.log*
**/yarn-debug.log*
**/yarn-error.log*
**/lerna-debug.log*
**/.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
**/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Compiled binary addons (https://nodejs.org/api/addons.html)
**/build
**/builds

# Dependency directories
**/node_modules/

# Snowpack dependency directory (https://snowpack.dev/)
**/web_modules/

# TypeScript cache
**/*.tsbuildinfo

# Optional npm cache directory
**/.npm

# Optional eslint cache
**/.eslintcache

# Output of 'npm pack'
**/*.tgz

# Yarn Integrity file
**/.yarn-integrity

# dotenv environment variable files
**/.env
**/.env.development.local
**/.env.test.local
**/.env.production.local
**/.env.local

# Next.js build output
**/.next
**/out

# Gatsby files
**/.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
**/.vuepress/dist

# vuepress v2.x temp and cache directory
**/.temp

# Stores VSCode versions used for testing VSCode extensions
**/.vscode-test

# yarn v2
**/.yarn/cache
**/.yarn/unplugged
**/.yarn/build-state.yml
**/.yarn/install-state.gz
**/.pnp.*

### Node Patch ###
# Serverless Webpack directories
**/.webpack/

### Python ###
# Byte-compiled / optimized / DLL files
**/__pycache__/
**/*.py[cod]
**/*$py.class

# C extensions

# Distribution / packaging
**/.Python
**/build/
**/develop-eggs/
**/dist/
**/downloads/
**/eggs/
**/.eggs/
**/lib64/
**/parts/
**/sdist/
**/var/
**/wheels/
**/share/python-wheels/
**/*.egg-info/
**/.installed.cfg
**/*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
**/*.manifest
**/*.spec

# Installer logs
**/pip-log.txt
**/pip-delete-this-directory.txt

# Unit test / coverage reports
**/htmlcov/
**/.tox/
**/.nox/
**/.coverage
**/.coverage.*
**/nosetests.xml
**/coverage.xml
**/*.cover
**/*.py,cover
**/.hypothesis/
**/.pytest_cache/
**/cover/

# Django stuff:
**/local_settings.py
**/db.sqlite3
**/db.sqlite3-journal

# Flask stuff:
**/instance/
**/.webassets-cache

# Scrapy stuff:
**/.scrapy

# Sphinx documentation
**/docs/_build/

# PyBuilder
**/.pybuilder/
**/target/

# Jupyter Notebook
**/.ipynb_checkpoints

# IPython
**/profile_default/
**/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
**/.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
**/__pypackages__/

# Environments
**/.venv
**/env/
**/venv/
**/ENV/
**/env.bak/
**/venv.bak/

# mkdocs documentation
**//site

# mypy
**/.mypy_cache/
**/.dmypy.json
**/dmypy.json

# Pyre type checker
**/.pyre/

# pytype static type analyzer
**/.pytype/


# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
**/.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
**/poetry.toml

# ruff
**/.ruff_cache/

# LSP config files
**/pyrightconfig.json